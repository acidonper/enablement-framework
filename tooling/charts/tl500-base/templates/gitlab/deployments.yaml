{{- if .Values.gitlab -}}
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: "{{ .Values.gitlab.app_name }}"
  namespace: "{{ .Values.gitlab.namespace }}"
  labels:
    app: "{{ .Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - gitlab-ce
      from:
        kind: ImageStreamTag
        name: "{{ .Values.gitlab.app_name }}-{{ .Values.gitlab.imagestreams.gitlab.name }}:{{ .Values.gitlab.imagestreams.gitlab.tag_name }}"
  replicas: 1
  test: false
  selector:
    app: "{{ .Values.gitlab.app_name }}"
    deploymentconfig: "{{ .Values.gitlab.app_name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.gitlab.app_name }}"
        deploymentconfig: "{{ .Values.gitlab.app_name }}"
    spec:
      {{- if .Values.runOnInfra }}
      nodeSelector:
        node-role.kubernetes.io/infra: ''
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        value: reserved
      - effect: NoExecute
        key: node-role.kubernetes.io/infra
        value: reserved
      {{- end }}
      volumes:
      - name: gitlab-ce-volume-1
        persistentVolumeClaim:
          claimName: "{{ .Values.gitlab.app_name }}-etc"
      - name: gitlab-ce-volume-2
        persistentVolumeClaim:
          claimName: "{{ .Values.gitlab.app_name }}-data"
{{- if .Values.gitlab.cacert }}
      - name: gitlab-ca
        secret:
          defaultMode: 420
          items:
          - key: "ca-cert.crt"
            path: "ca-cert.crt"
          secretName: "{{ .Values.gitlab.app_name }}-ca"
{{- end }}
      containers:
      - name: gitlab-ce
        image: repository.local/replaced-by-image-stream-trigger
        ports:
        - containerPort: 22
          protocol: TCP
        - containerPort: 80 
          protocol: TCP
        env:
        - name: ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: root_password
              optional: false
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: postgres_user
              optional: false
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: postgres_password
              optional: false
        - name: GITLAB_OMNIBUS_CONFIG
          value:
            root_pass="$(ROOT_PASSWORD)";
            external_url "https://{{ .Values.gitlab.app_name }}.{{ include "tl500.app_domain" . }}";
            nginx['listen_port']=80;
            nginx['listen_https']=false;
            gitlab_rails['initial_root_password']=root_pass;
            gitlab_rails['gitlab_port']=80;
            letsencrypt['enable'] = false;
            postgresql['enable']=false;
            gitlab_rails['db_host'] = '{{ .Values.gitlab.app_name }}-postgresql';
            gitlab_rails['db_password']="$(POSTGRESQL_PASSWORD)";
            gitlab_rails['db_username']="$(POSTGRESQL_USER)";
            gitlab_rails['db_database']='{{ .Values.gitlab.db_name | default "gitlabhq_production" }}';
            redis['enable'] = false; 
            gitlab_rails['redis_host']='{{ .Values.gitlab.app_name }}-redis';
            unicorn['worker_processes'] = {{ .Values.gitlab.uni_workers | default 2 }}; 
            manage_accounts['enable'] = true;
            manage_storage_directories['manage_etc'] = false; 
            gitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys';
            git_data_dirs({ 'default' => { 'path' => '/gitlab-data/git-data' } });
            gitlab_rails['shared_path'] = '/gitlab-data/shared'; 
            gitlab_rails['uploads_directory'] = '/gitlab-data/uploads';
            gitlab_ci['builds_directory'] = '/gitlab-data/builds';
            prometheus_monitoring['enable'] = false;
            gitlab_rails['rack_attack_git_basic_auth'] = { 'enabled' => false, };
            gitlab_rails['ldap_enabled'] = true;
            gitlab_rails['ldap_servers'] = { 'main' => { 'label' => '{{ .Values.gitlab.label | default "LDAP" }}', 'host' => '{{ include "gitlab.ldap.uri" . }}', 'port' => '{{ include "gitlab.ldap.port" . }}', 'uid' => 'uid', 'bind_dn' => '{{ include "gitlab.ldap.bind_dn" . }}', 'password' => '{{ include "gitlab.ldap.bind_password" . }}', 'encryption' => '{{ include "gitlab.ldap.encryption" . }}', 'verify_certificates' => {{ .Values.gitlab.ldap.validate_certs | default false }}, 'allow_username_or_email_login' => true, 'block_auto_created_users' => false, 'active_directory' => false, 'base' => '{{ include "gitlab.ldap.base" . }}', 'user_filter' => '{{ include "gitlab.ldap.user_filter" . | default "" }}', 'attributes' => { 'username' => ['uid'], 'email' => ['mail'], 'name' => 'displayName' } } };
            gitlab_rails['gitlab_signup_enabled'] = false;
        resources:
          limits:
            cpu: '2'
            memory: 6Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: gitlab-ce-volume-1
          mountPath: "/etc/gitlab"
        - name: gitlab-ce-volume-2
          mountPath: "/gitlab-data"
{{- if .Values.gitlab.cacert }}
        - name: gitlab-ca
          mountPath: /etc/gitlab-ssl
{{- end }}
        livenessProbe:
          httpGet:
            path: "/help"
            port: 80 
            scheme: HTTP
          initialDelaySeconds: 120
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/help"
            port: 80 
            scheme: HTTP
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccount: "{{ .Values.gitlab.app_name }}-user"
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: "{{ .Values.gitlab.app_name }}-redis"
  namespace: "{{ .Values.gitlab.namespace }}"
  labels:
    app: "{{ .Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate
    recreateParams: {}
    resources: {}
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - gitlab-ce-redis
      from:
        kind: ImageStreamTag
        name: "{{ .Values.gitlab.app_name }}-{{ .Values.gitlab.imagestreams.redis.name }}:{{ .Values.gitlab.imagestreams.redis.tag_name }}"
  replicas: 1
  test: false
  selector:
    app: "{{ .Values.gitlab.app_name }}"
    deploymentconfig: "{{ .Values.gitlab.app_name }}-redis"
  template:
    metadata:
      labels:
        app: "{{ .Values.gitlab.app_name }}"
        deploymentconfig: "{{ .Values.gitlab.app_name }}-redis"
    spec:
      {{- if .Values.runOnInfra }}
      nodeSelector:
        node-role.kubernetes.io/infra: ''
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        value: reserved
      - effect: NoExecute
        key: node-role.kubernetes.io/infra
        value: reserved
      {{- end }}
      volumes:
      - name: gitlab-ce-volume-4
        persistentVolumeClaim:
          claimName: "{{ .Values.gitlab.app_name }}-redis-data"
      containers:
      - name: gitlab-ce-redis
        image: repository.local/replaced-by-image-stream-trigger
        command:
        - "/bin/sh"
        - "-ec"
        args:
        - exec redis-server
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '1'
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
        - name: gitlab-ce-volume-4
          mountPath: "/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
kind: DeploymentConfig
apiVersion: apps.openshift.io/v1
metadata:
  name: "{{ .Values.gitlab.app_name }}-postgresql"
  namespace: "{{ .Values.gitlab.namespace }}"
  labels:
    app: "{{ .Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate
    # this doesn't work when on an infra node as the node selector is inherited from the Deploy but the tollerations are not...
    {{- if not .Values.runOnInfra }}
    recreateParams:
      post:
        failurePolicy: Abort
        execNewPod:
          containerName: gitlab-ce-postgresql
          command:
            - /bin/bash
            - -c
            - |
              psql -h '{{ .Values.gitlab.app_name }}-postgresql' -U postgres -d {{ .Values.gitlab.db_name | default "gitlabhq_production" }} -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'
              exit 0
          env:
          - name: HOME
            value: "/var/lib/pgsql"
          - name: PGDATA
            value: "/var/lib/pgsql/data/userdata"
          - name: CONTAINER_SCRIPTS_PATH
            value: "/usr/share/container-scripts/postgresql"
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.gitlab.app_name }}-credentials"
                key: postgres_admin_password
                optional: false
      {{- end }}
    resources: {}
  triggers:
  - type: ConfigChange
  - type: ImageChange
    imageChangeParams:
      automatic: true
      containerNames:
      - gitlab-ce-postgresql
      from:
        kind: ImageStreamTag
        name: "{{ .Values.gitlab.app_name }}-{{ .Values.gitlab.imagestreams.postgresql.name }}:{{ .Values.gitlab.imagestreams.postgresql.tag_name }}"
        namespace: {{ .Values.gitlab.namespace }}
  replicas: 1
  test: false
  selector:
    app: "{{ .Values.gitlab.app_name }}"
    deploymentconfig: "{{ .Values.gitlab.app_name }}-postgresql"
  template:
    metadata:
      labels:
        app: "{{ .Values.gitlab.app_name }}"
        deploymentconfig: "{{ .Values.gitlab.app_name }}-postgresql"
    spec:
      {{- if .Values.runOnInfra }}
      nodeSelector:
        node-role.kubernetes.io/infra: ''
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        value: reserved
      - effect: NoExecute
        key: node-role.kubernetes.io/infra
        value: reserved
      {{- end }}
      volumes:
      - name: gitlab-ce-volume-3
        persistentVolumeClaim:
          claimName: "{{ .Values.gitlab.app_name }}-postgresql"
      containers:
      - name: gitlab-ce-postgresql
        image: repository.local/replaced-by-image-stream-trigger
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
              'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: postgres_user
              optional: false
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: postgres_password
              optional: false
        - name: POSTGRESQL_DATABASE
          value: "{{ .Values.gitlab.db_name | default "gitlabhq_production" }}"
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.gitlab.app_name }}-credentials"
              key: postgres_admin_password
              optional: false
        resources:
          limits:
            cpu: '1'
            memory: 1024Mi
          requests:
            cpu: 300m
            memory: 300Mi
        volumeMounts:
        - name: gitlab-ce-volume-3
          mountPath: "/var/lib/pgsql/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
{{- if .Values.runOnInfra }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Values.gitlab.app_name }}-configure-postgresql"
  namespace: "{{ .Values.gitlab.namespace }}"
spec:
  template:
    spec:
      nodeSelector:
        node-role.kubernetes.io/infra: ''
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        value: reserved
      - effect: NoExecute
        key: node-role.kubernetes.io/infra
        value: reserved
      containers:
      - command:
          - /bin/bash
          - -c
          - |
            echo "Waiting for postgresql to be ready..."
            until pg_isready -h '{{ .Values.gitlab.app_name }}-postgresql' -p 5432
            do
              sleep 1
            done
            psql -h '{{ .Values.gitlab.app_name }}-postgresql' -U postgres -d {{ .Values.gitlab.db_name | default "gitlabhq_production" }} -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'
            exit 0
        image: "{{ .Values.gitlab.imagestreams.postgresql.stream_uri }}"
        imagePullPolicy: IfNotPresent
        name: job
        env:
          - name: HOME
            value: "/var/lib/pgsql"
          - name: PGDATA
            value: "/var/lib/pgsql/data/userdata"
          - name: CONTAINER_SCRIPTS_PATH
            value: "/usr/share/container-scripts/postgresql"
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.gitlab.app_name }}-credentials"
                key: postgres_admin_password
                optional: false
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 10
{{- end }}
{{- end -}}
